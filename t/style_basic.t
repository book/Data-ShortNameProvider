use strict;
use warnings;
use Test::More;

use Data::ShortNameProvider;

my $np = Data::ShortNameProvider->new(
    style           => 'Basic',       # default
    max_name_length => 32,            # default
    timestamp_epoch => 1234567890,    # Fri Feb 13 23:31:30 2009

    # Basic-specific arguments
    prefix  => 'dbit',
    version => 1,
);

# type checking
isa_ok( $np,           'Data::ShortNameProvider' );
isa_ok( $np->provider, 'Data::ShortNameProvider::Style::Basic' );
is( $np->style_class, 'Data::ShortNameProvider::Style::Basic', 'style_class' );

# delegated stuff
is( $np->timestamp_epoch,           1234567890, 'timestamp_epoch (main)' );
is( $np->provider->timestamp_epoch, 1234567890, 'timestamp_epoch (style)' );

# short names
my $foo = $np->generate_new_name('foo');
is( $foo, 'dbit1_090213__foo', "'$foo' is a short name for 'foo'" );

ok( $np->is_generated_name($foo),  "'$foo' was generated by us" );
ok( !$np->is_generated_name('foo'), "'foo' was NOT generated by us" );

# parse names
is( $np->provider->parsing_regexp, qr/^dbit1_090213__(.*)$/, 'parsing_regexp' );

# via the provider
my $hash = $np->provider->parse_generated_name($foo);
is_deeply(
    $hash,
    {
        prefix          => 'dbit',
        version         => 1,
        timestamp       => '090213',
        timestamp_epoch => 1234567890,
        name            => 'foo',
    },
    "parsed '$foo' (style)"
);
is(
    $np->style_class->new($hash)->generate_new_name('bar'),
    'dbit1_090213__bar',
    "generate a short name for 'bar' (style)"
);

# via the main class delegation
$hash = $np->parse_generated_name($foo);
is_deeply(
    $hash,
    {
        style           => 'Basic',
        max_name_length => 32,
        prefix          => 'dbit',
        version         => 1,
        timestamp       => '090213',
        timestamp_epoch => 1234567890,
        name            => 'foo',
    },
    "parsed '$foo' (main)"
);
is(
    Data::ShortNameProvider->new($hash)->generate_new_name('bar'),
    'dbit1_090213__bar',
    "generate a short name for 'bar' (main)"
);

# error case
ok( !eval { $np->generate_new_name('this_is_way_too_long') }, 'name too long' );
like(
    $@,
    qr/^dbit1_090213__this_is_way_too_long \(provided by Data::ShortNameProvider::Style::Basic\) is longer than the 32 bytes limit /,
    '... expected error message'
);

done_testing;
